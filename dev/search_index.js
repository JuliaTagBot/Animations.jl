var documenterSearchIndex = {"docs":
[{"location":"#Animations.jl-1","page":"Animations.jl","title":"Animations.jl","text":"","category":"section"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"Animations.jl offers an easy way to set up simple animations where multiple keyframes are interpolated between in sequence. You can choose different easing functions or create your own. Keyframe values can be anything that can be linearly interpolated, you can also add your own methods for special types. An easing can have repetitions and delays, so that looping animations are simpler to create.","category":"page"},{"location":"#Basic-principle-1","page":"Animations.jl","title":"Basic principle","text":"","category":"section"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"An Animation consists of keyframes that each have a time stamp and a value. That value must be of the same type for all keyframes.","category":"page"},{"location":"#Syntax-examples-1","page":"Animations.jl","title":"Syntax examples","text":"","category":"section"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"Creating an animation from 0 at t = 0, to 10 at t = 2, and then 20 at t = 3, with a sine in / out easing that yoyos 3 times and then a linear easing:","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"anim = Animation(\n    0, 0,\n    sineio(n=3, yoyo=true),\n    2, 10,\n    linear(),\n    3, 20\n)","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"Another way to write this is with vectors for timestamps and values, although the first version can be easier to understand with multiple timestamps:","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"anim = Animation(\n    [0, 2, 3],\n    [0, 10, 20],\n    [sineio(n=3, yoyo=true), linear()],\n)","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"You can get an animation's value for a specific t by calling it:","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"val_1 = anim(t)","category":"page"},{"location":"#Colors-and-special-types-1","page":"Animations.jl","title":"Colors and special types","text":"","category":"section"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"Using Colors is enabled already, but you can add other custom types that can be interpolated:","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"coloranim = Animation(\n    0, RGB(1, 0, 0),\n    sineio(),\n    1, RGB(0, 1, 0),\n    polyin(2),\n    2, RGB(0, 0, 1)\n)","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"For your own type T, if the generic (value2 - value1) * fraction + value1 doesn't work, just add a method linear_interpolate(fraction::Real, value1::T, value2::T) where T.","category":"page"},{"location":"#Arrays-1","page":"Animations.jl","title":"Arrays","text":"","category":"section"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"Interpolation also works easily with arrays of values:","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"Animation(\n    0, rand(25),\n    sineio(n=2, yoyo=true, prewait=0.3),\n    2, rand(25)\n)","category":"page"},{"location":"#Relative-timestamps-1","page":"Animations.jl","title":"Relative timestamps","text":"","category":"section"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"If you're tweaking the length of parts of an animation, you can use rel() for a timestamp relative to the previous one, like so:","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"Animation(\n    0,        1,\n    rel(1),   2,\n    rel(3),   3,\n    rel(0.2), 0,\n    rel(0.4), 1\n)","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"This way it's easier to adjust one duration without having to change all following ones.","category":"page"},{"location":"#FiniteLengthAnimation-1","page":"Animations.jl","title":"FiniteLengthAnimation","text":"","category":"section"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"Animations, Loops and Sequences are subtypes of FiniteLengthAnimation, which are required as the content for (finite) Loops and Sequences","category":"page"},{"location":"#Loops-1","page":"Animations.jl","title":"Loops","text":"","category":"section"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"You can turn a FiniteLengthAnimation into a loop like this:","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"a = Animation(\n    0,   1,\n    sineio(),\n    0.5, 2,\n    polyin(3),\n    1,   1\n)\n\nstart = 0\ngap = 1\nrepetitions = 3\nl = Loop(a, start, gap, repetitions)","category":"page"},{"location":"#Sequences-1","page":"Animations.jl","title":"Sequences","text":"","category":"section"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"You can string together FiniteLengthAnimations into sequences like this:","category":"page"},{"location":"#","page":"Animations.jl","title":"Animations.jl","text":"anim1 = Animation(\n    0,   1,\n    sineio(),\n    0.5, 2,\n    polyin(3),\n    1,   1\n)\n\nanim2 = Animation(\n    0,   1,\n    saccadic(2),\n    0.5, 5,\n    expout(3),\n    1,   1\n)\n\nloop = Loop(anim2, 0, 0.5, 3)\n\nstart = 0\ngap = 1\nsequence = Sequence([anim1, loop], start, gap)","category":"page"}]
}
